name: 'Kurtosis Cache GitHub Action'
description: 'Caches docker images for kurtosis'
branding:
  icon: 'box'
  color: 'green'
inputs:
  kurtosis_version:
    description: 'Specific version of Kurtosis to use'
    required: false
    default: 'latest'
  warmup_cache:
    description: 'Warmup cache with dummy testnet'
    required: false
    default: 'true'
  cache_prefix:
    description: 'Prefix for the cache'
    required: false
    default: 'kurtosis-docker'
  s3_access_key:
    description: 'S3 access key'
    required: false
  s3_secret_key:
    description: 'S3 secret key'
    required: false
  s3_bucket:
    description: 'S3 bucket'
    required: false
  s3_endpoint:
    description: 'S3 endpoint'
    required: false
    default: 's3.amazonaws.com'
  s3_insecure:
    description: 'S3 secure'
    required: false
    default: 'false'
  s3_path:
    description: 'S3 path'
    required: false
    default: ''

outputs:
  kurtosis_version:
    description: "Kurtosis version"
    value: ${{ steps.kurtosis_version.outputs.version }}
  cache_hit:
    description: "Cache hit"
    value: ${{ steps.cache.outputs.cache-hit }}
  cachedir:
    description: "Cachedir"
    value: ${{ steps.cachedir.outputs.cachedir }}
  
runs:
  using: 'composite'
  steps:
    - name: Get kurtosis version
      id: kurtosis_version
      shell: bash
      run: |
        kurtosis_version="${{ inputs.kurtosis_version }}"
        if [ "$kurtosis_version" = "latest" ]; then
          # get latest kurtosis version
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt-get update -o Dir::Etc::sourcelist="sources.list.d/kurtosis.list" -o Dir::Etc::sourceparts="-" -o APT::Get::List-Cleanup="0"
          kurtosis_version=$(apt show kurtosis-cli | grep Version | awk '{print $2}')
        fi
        echo "version=$kurtosis_version" >> $GITHUB_OUTPUT
    - name: Create directory for docker cache
      id: cachedir
      shell: bash
      run: |
        cachedir="${{ runner.temp }}/kurtosis-cache-${{ steps.kurtosis_version.outputs.version }}"
        mkdir -p $cachedir
        echo "cachedir=$cachedir" >> $GITHUB_OUTPUT

    - name: Load docker images cache.
      id: local_cache
      uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # 4.2.3
      if: ${{ inputs.s3_access_key == '' }}
      with:
        path: ${{ steps.cachedir.outputs.cachedir }}
        key: ${{ inputs.cache_prefix }}-${{ runner.os }}-${{ steps.kurtosis_version.outputs.version }}
      
    - name: Load docker images cache from S3.
      id: s3_cache
      uses: tespkg/actions-cache@a2e3f005921809689270625bc026d387f73017ae # 1.9.0
      if: ${{ inputs.s3_access_key != '' }}
      with:
        path: ${{ steps.cachedir.outputs.cachedir }}
        key: ${{ inputs.s3_path }}${{ inputs.cache_prefix }}-${{ runner.os }}-${{ steps.kurtosis_version.outputs.version }}
        restore-keys: ${{ inputs.cache_prefix }}-${{ runner.os }}-${{ steps.kurtosis_version.outputs.version }}
        accessKey: ${{ inputs.s3_access_key }}
        secretKey: ${{ inputs.s3_secret_key }}
        bucket: ${{ inputs.s3_bucket }}
        endpoint: ${{ inputs.s3_endpoint }}
        insecure: ${{ inputs.s3_insecure }}

    - name: Get cache hit.
      id: cache
      shell: bash
      run: |
        if [ "${{ inputs.s3_access_key }}" != "" ]; then
          echo "cache-hit=${{ steps.s3_cache.outputs.cache-hit }}" >> $GITHUB_OUTPUT
        else
          echo "cache-hit=${{ steps.local_cache.outputs.cache-hit }}" >> $GITHUB_OUTPUT
        fi

    - name: "Restore docker cache"
      if: ${{ steps.cache.outputs.cache-hit == 'true' }}
      shell: bash
      run: |
        echo "Restoring docker cache..."
        docker load -i ${{ steps.cachedir.outputs.cachedir }}/docker-images.tar
    
    - name: "Generate dummy kurtosis config"
      if: ${{ inputs.warmup_cache == 'true' && steps.cache.outputs.cache-hit == '' }}
      id: warmup
      shell: bash
      run: |
        tempdir="${{ runner.temp }}/kurtosis-warmup-${{ steps.kurtosis_version.outputs.version }}"
        mkdir -p $tempdir
        echo "{\"participants\": []}" > $tempdir/test-network.yaml
        echo "tempdir=$tempdir" >> $GITHUB_OUTPUT

    - name: Run kurtosis testnet for cache warmup
      if: ${{ inputs.warmup_cache == 'true' && steps.cache.outputs.cache-hit == '' }}
      continue-on-error: true
      id: testnet
      uses: ethpandaops/kurtosis-assertoor-github-action@5932604b244dbd2ddb811516b516a9094f4d2c2f # v1
      with:
        kurtosis_extra_args: "--image-download always --non-blocking-tasks --verbosity DETAILED"
        kurtosis_backend: docker
        kurtosis_version: ${{ steps.kurtosis_version.outputs.version }}
        ethereum_package_url: github.com/pk910/kurtosis-dummy-pkg
        ethereum_package_branch: main
        ethereum_package_args: ${{ steps.warmup.outputs.tempdir }}/test-network.yaml
        enclave_name: "assertoor-warmup"
        await_assertoor_tests: "false"
        enclave_dump: "false"

    - name: "Cache docker images"
      if: ${{ inputs.warmup_cache == 'true' && steps.cache.outputs.cache-hit == '' }}
      shell: bash
      run: |
        cachedir="${{ steps.cachedir.outputs.cachedir }}"
        if [ ! -d $cachedir ]; then
          mkdir -p $cachedir
        fi
        
        docker_images=$(docker image list --format '{{ if ne .Repository "<none>" }}{{ .Repository }}{{ if ne .Tag "<none>" }}:{{ .Tag }}{{ end }}{{ else }}{{ .ID }}{{ end }}' | tr '\n' ' ')
        docker save --output $cachedir/docker-images.tar $docker_images
